!function(){const t=new CSSStyleSheet;t.replaceSync("\n");class e extends HTMLElement{static observedAttributes=["min","max","callback","width"];constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.adoptedStyleSheets=[t],this.shadowRoot.innerHTML='\n      <style>\n        .box {\n          display: inline-block;\n          width: 30px;\n          height: 30px;\n          line-height: 30px;\n          text-align: center;\n          border: 1px solid #aaa;\n          user-select: none;\n          cursor: ns-resize;\n          font-family: sans-serif;\n        }\n      </style>\n      <div class="box"></div>\n    ',this.displayEl=this.shadowRoot.querySelector("div"),this.value=0,this.min=-1/0,this.max=1/0,this.callbackName=null,this.dragStartY=null,this.addEventListener("mousedown",this.onMouseDown.bind(this))}connectedCallback(){const t=parseInt(this.textContent);isNaN(t)||(this.value=t),this.updateDisplay()}attributeChangedCallback(t,e,i){"min"===t&&(this.min=parseInt(i)),"max"===t&&(this.max=parseInt(i)),"callback"===t&&(this.callbackName=i)}updateDisplay(){this.displayEl.textContent=this.value}onMouseDown(t){t.preventDefault(),this.dragStartY=t.clientY,this.startValue=this.value;const e=t=>{const e=t.clientY-this.dragStartY;let i=-Math.round(e/5),s=this.startValue+i;s=Math.max(this.min,Math.min(this.max,s)),s!==this.value&&(this.value=s,this.updateDisplay(),this.invokeCallback())},i=()=>{window.removeEventListener("mousemove",e),window.removeEventListener("mouseup",i)};window.addEventListener("mousemove",e),window.addEventListener("mouseup",i)}invokeCallback(){this.dispatchEvent(new CustomEvent("change",{detail:this.value}))}set value(t){this._value=t,this.updateDisplay()}get value(){return this._value}}customElements.define("int-box",e)}(),function(){(new CSSStyleSheet).replaceSync("\n");class t extends HTMLElement{static get observedAttributes(){return["value"]}constructor(){super(),this.attachShadow({mode:"open"}),this._value=!1,this.shadowRoot.innerHTML='\n      <style>\n        .box {\n          display: inline-block;\n          width: 30px;\n          height: 30px;\n          line-height: 30px;\n          border: 1px solid #aaa;\n          background: #555;\n          user-select: none;\n          cursor: pointer;\n        }\n      </style>\n      <div class="box"></div>\n    ',this.box=this.shadowRoot.querySelector(".box"),this.box.addEventListener("click",()=>{this.value=!this.value,this.dispatchEvent(new CustomEvent("change",{detail:this.value}))})}connectedCallback(){const t=this.textContent.trim().toLowerCase();"true"===t?this.value=!0:"false"===t&&(this.value=!1),this.update()}attributeChangedCallback(t,e,i){"value"===t&&(this.value="true"===i)}set value(t){this._value=!!t,this.update()}get value(){return this._value}update(){this.box.style.background=this._value?"#ff5e00":"#555555"}}customElements.define("led-indicator",t)}(),function(){(new CSSStyleSheet).replaceSync("\n");class t extends HTMLElement{static count=0;constructor(){super(),this.id=this.constructor.count++,this.steps=[],this.currentStep=0,this.activeNote=null,this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot.innerHTML='\n      <style>\n        .step-grid { display: flex; gap: 4px; }\n        .edit-grid { display: flex; gap: 4px; margin-top: 4px; }\n        .vel-grid { display: flex; gap: 4px; margin-top: 4px; }\n        .slur-grid { display: flex; gap: 4px; margin-top: 4px; }\n        .active-step {\n          outline: 2px solid gold;\n          box-shadow: 0 0 8px gold;\n          border-radius: 4px;\n        }\n      </style>\n      <div>\n        <label>MIDI Out:\n          <select class="midiOut"></select>\n        </label>\n        <label>Channel:\n          <int-box min="1" max="16">1</int-box>\n        </label>\n        <label>Prog:\n          <int-box id="prog" min="0" max="127">1</int-box>\n        </label>\n        <label>Mute:\n          <led-indicator id="mute">false</led-indicator>\n        </label>\n        <div class="step-grid"></div>\n        <div class="edit-grid"></div>\n        <div class="vel-grid"></div>\n        <div class="slur-grid"></div>\n      </div>\n    ',this.outputSelect=this.shadowRoot.querySelector(".midiOut"),this.grid=this.shadowRoot.querySelector(".step-grid"),this.editGrid=this.shadowRoot.querySelector(".edit-grid"),this.velGrid=this.shadowRoot.querySelector(".vel-grid"),this.slurGrid=this.shadowRoot.querySelector(".slur-grid"),this.intBox=this.shadowRoot.querySelector("int-box"),this.programBox=this.shadowRoot.querySelector("#prog"),this.programBox.addEventListener("change",t=>{console.log("Prog changed to",t.detail),this.program=t.detail,this.saveToStorage()}),this.muteSwitch=this.shadowRoot.querySelector("#mute"),this.muteSwitch.addEventListener("change",t=>{console.log("Mute changed to",t.detail),this.isMuted=t.detail,this.saveToStorage()});for(let t=0;t<16;t++){const e=document.createElement("step-control");e.setAttribute("type","rest"),this.steps.push({type:"rest",note:60,velocity:100,ref:e}),e.addEventListener("change",e=>{this.steps[t].type=e.detail,this.updateEditGrid(),this.saveToStorage()}),this.grid.appendChild(e);const i=document.createElement("int-box");i.min=0,i.max=127,i.value=60,i.addEventListener("change",e=>{const i=this.steps[t];"note"===i.type&&(i.note=e.detail,this.saveToStorage())}),this.editGrid.appendChild(i);const s=document.createElement("int-box");s.min=0,s.max=127,s.value=60,s.addEventListener("change",e=>{const i=this.steps[t];"note"===i.type&&(i.velocity=e.detail,this.saveToStorage())}),this.velGrid.appendChild(s);const n=document.createElement("led-indicator");n.addEventListener("change",e=>{this.steps[t].slurred=e.detail,this.saveToStorage()}),this.slurGrid.appendChild(n)}this.loadFromStorage(),this.intBox.addEventListener("change",t=>{console.log("Channel changed to",t.detail),this.channel=t.detail,this.resetMidi(),this.saveToStorage()})}updateEditGrid(){this.steps.forEach((t,e)=>{const i=this.editGrid.children[e];"note"===t.type?(i.value=t.note,i.min="0",i.max="127"):(i.value="---",i.min="---",i.max="---");const s=this.velGrid.children[e];"note"===t.type?(s.value=t.velocity,s.min="0",s.max="127"):(s.value="---",s.min="---",s.max="---"),this.slurGrid.children[e].value=t.slurred}),this.programChange(this.program)}onMIDISuccess(t){this.midiAccess=t;for(const t of this.midiAccess.outputs.values()){const e=document.createElement("option");e.value=t.id,e.text=t.name,this.outputSelect.appendChild(e)}}getMidiOutput(){return this.midiAccess?this.midiAccess.outputs.get(this.outputSelect.value):void 0}playStep(){if(1==this.isMuted)return;this.highlightStep(this.currentStep);const t=this.steps[this.currentStep],e=this.getMidiOutput();e&&t&&("note"===t.type?(t.slurred?(t.velocity&&e.send([144|this.channel-1,t.note,t.velocity]),null!==this.activeNote&&(e.send([128|this.channel-1,this.activeNote.note,0]),this.activeNote=null)):(null!==this.activeNote&&(e.send([128|this.channel-1,this.activeNote.note,0]),this.activeNote=null),t.velocity&&e.send([144|this.channel-1,t.note,t.velocity])),t.velocity&&(this.activeNote=t)):"rest"===t.type?null!==this.activeNote&&(e.send([128|this.channel-1,this.activeNote.note,0]),this.activeNote=null):t.type)}incStep(){this.currentStep=(this.currentStep+1)%16}setStep(t=0){this.currentStep=t}programChange(t){this.programBox.value=this.program=t;const e=this.getMidiOutput();if(!e)return;const i=t,s=192|this.channel-1;e.send([s,i])}stopActiveNote(){null!==this.activeNote&&(out.send([128|this.channel-1,this.activeNote.note,0]),this.activeNote=null)}mute(){this.isMuted=!0,stopActiveNote()}unmute(){this.isMuted=!1}resetMidi(){if(this.highlightStep(-1),this.midiAccess)for(let t=0;t<16;t++)this.midiAccess.outputs.forEach(e=>{e.send([176|t,123,0])})}saveToStorage(){const t={channel:this.channel||1,program:this.program||0,isMuted:this.isMuted||!1,outputId:this.outputSelect.value,steps:this.steps.map(t=>({type:t.type,note:t.note,velocity:t.velocity,slurred:t.slurred||!1}))};console.log(this.channel,"pr",t.program),localStorage.setItem(`track-${this.id}`,JSON.stringify(t)),console.log(`saveToStorage track-${this.id}`)}loadFromStorage(){const t=JSON.parse(localStorage.getItem(`track-${this.id}`));t&&(this.program=t.program||1,this.channel=t.channel||1,this.intBox.value=this.channel,this.isMuted=t.isMuted||!1,this.muteSwitch.value=this.isMuted,this.outputSelect.value=t.outputId,this.steps.forEach((e,i)=>{const s=t.steps[i];e.type=s.type,e.note=s.note,e.velocity=s.velocity,e.slurred=s.slurred||!1,e.ref.setAttribute("type",s.type)}),console.log(this.channel,"pr",this.program),this.updateEditGrid())}highlightStep(t){this.steps.forEach((e,i)=>{i===t?e.ref.classList.add("active-step"):e.ref.classList.remove("active-step")})}}customElements.define("track-lane",t)}(),function(){(new CSSStyleSheet).replaceSync("\n");class t extends HTMLElement{static observedAttributes=["type","note","velocity"];constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="\n      <style>\n        :host {\n          display: inline-block;\n          width: 30px;\n          height: 30px;\n          border: 1px solid #aaa;\n          text-align: center;\n          line-height: 30px;\n          user-select: none;\n          cursor: pointer;\n          font-family: sans-serif;\n        }\n      </style>\n      <div>-</div>\n    ",this.display=this.shadowRoot.querySelector("div"),this.addEventListener("click",this.onClick.bind(this))}connectedCallback(){this.type=this.getAttribute("type")||"rest",this.note=parseInt(this.getAttribute("note")||"60"),this.velocity=parseInt(this.getAttribute("velocity")||"100"),this.update()}attributeChangedCallback(t,e,i){"type"===t&&(this.type=i),"note"===t&&(this.note=parseInt(i)),"velocity"===t&&(this.velocity=parseInt(i)),this.update()}onClick(){const t=["rest","note","tie"],e=t.indexOf(this.type);this.type=t[(e+1)%t.length],this.setAttribute("type",this.type),this.update(),this.dispatchEvent(new CustomEvent("change",{detail:this.type}))}update(){"note"===this.type?this.display.textContent="♪":"tie"===this.type?this.display.textContent="_":this.display.textContent="-"}}customElements.define("step-control",t)}();