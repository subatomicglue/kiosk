const globalStyles=new CSSStyleSheet;globalStyles.replaceSync("\n");class TrackLane extends HTMLElement{static count=0;constructor(){super(),this.id=this.constructor.count++,this.steps=[],this.currentStep=0,this.activeNote=null,this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot.innerHTML='\n      <style>\n        .step-grid { display: flex; gap: 4px; }\n        .edit-grid { display: flex; gap: 4px; margin-top: 4px; }\n        .vel-grid { display: flex; gap: 4px; margin-top: 4px; }\n        .slur-grid { display: flex; gap: 4px; margin-top: 4px; }\n      </style>\n      <div>\n        <label>MIDI Out:\n          <select class="midiOut"></select>\n        </label>\n        <label>Channel:\n          <int-box min="1" max="16">1</int-box>\n        </label>\n        <label>Prog:\n          <int-box id="prog" min="0" max="127">1</int-box>\n        </label>\n        <label>Mute:\n          <led-indicator id="mute">false</led-indicator>\n        </label>\n        <div class="step-grid"></div>\n        <div class="edit-grid"></div>\n        <div class="vel-grid"></div>\n        <div class="slur-grid"></div>\n      </div>\n    ',this.outputSelect=this.shadowRoot.querySelector(".midiOut"),this.grid=this.shadowRoot.querySelector(".step-grid"),this.editGrid=this.shadowRoot.querySelector(".edit-grid"),this.velGrid=this.shadowRoot.querySelector(".vel-grid"),this.slurGrid=this.shadowRoot.querySelector(".slur-grid"),this.intBox=this.shadowRoot.querySelector("int-box"),this.programBox=this.shadowRoot.querySelector("#prog"),this.programBox.addEventListener("change",t=>{console.log("Prog changed to",t.detail),this.program=t.detail,this.saveToStorage()}),this.muteSwitch=this.shadowRoot.querySelector("#mute"),this.muteSwitch.addEventListener("change",t=>{console.log("Mute changed to",t.detail),this.isMuted=t.detail,this.saveToStorage()});for(let t=0;t<16;t++){const e=document.createElement("step-control");e.setAttribute("type","rest"),this.steps.push({type:"rest",note:60,velocity:100,ref:e}),e.addEventListener("change",e=>{this.steps[t].type=e.detail,this.updateEditGrid(),this.saveToStorage()}),this.grid.appendChild(e);const i=document.createElement("int-box");i.min=0,i.max=127,i.value=60,i.addEventListener("change",e=>{const i=this.steps[t];"note"===i.type&&(i.note=e.detail,this.saveToStorage())}),this.editGrid.appendChild(i);const s=document.createElement("int-box");s.min=0,s.max=127,s.value=60,s.addEventListener("change",e=>{const i=this.steps[t];"note"===i.type&&(i.velocity=e.detail,this.saveToStorage())}),this.velGrid.appendChild(s);const o=document.createElement("led-indicator");o.addEventListener("change",e=>{this.steps[t].slurred=e.detail,this.saveToStorage()}),this.slurGrid.appendChild(o)}this.loadFromStorage(),this.intBox.addEventListener("change",t=>{console.log("Channel changed to",t.detail),this.channel=t.detail,this.resetMidi(),this.saveToStorage()})}updateEditGrid(){this.steps.forEach((t,e)=>{const i=this.editGrid.children[e];"note"===t.type?(i.value=t.note,i.min="0",i.max="127"):(i.value="---",i.min="---",i.max="---");const s=this.velGrid.children[e];"note"===t.type?(s.value=t.velocity,s.min="0",s.max="127"):(s.value="---",s.min="---",s.max="---"),this.slurGrid.children[e].value=t.slurred}),this.programChange(this.program)}onMIDISuccess(t){this.midiAccess=t;for(const t of this.midiAccess.outputs.values()){const e=document.createElement("option");e.value=t.id,e.text=t.name,this.outputSelect.appendChild(e)}}getMidiOutput(){return this.midiAccess?this.midiAccess.outputs.get(this.outputSelect.value):void 0}playStep(){if(1==this.isMuted)return;const t=this.steps[this.currentStep],e=this.getMidiOutput();e&&t&&("note"===t.type?(t.slurred?(t.velocity&&e.send([144|this.channel-1,t.note,t.velocity]),null!==this.activeNote&&(e.send([128|this.channel-1,this.activeNote.note,0]),this.activeNote=null)):(null!==this.activeNote&&(e.send([128|this.channel-1,this.activeNote.note,0]),this.activeNote=null),t.velocity&&e.send([144|this.channel-1,t.note,t.velocity])),t.velocity&&(this.activeNote=t)):"rest"===t.type?null!==this.activeNote&&(e.send([128|this.channel-1,this.activeNote.note,0]),this.activeNote=null):t.type)}incStep(){this.currentStep=(this.currentStep+1)%16}setStep(t=0){this.currentStep=t}programChange(t){this.programBox.value=this.program=t;const e=this.getMidiOutput();if(!e)return;const i=t,s=192|this.channel-1;e.send([s,i])}stopActiveNote(){null!==this.activeNote&&(out.send([128|this.channel-1,this.activeNote.note,0]),this.activeNote=null)}mute(){this.isMuted=!0,stopActiveNote()}unmute(){this.isMuted=!1}resetMidi(){if(this.midiAccess)for(let t=0;t<16;t++)this.midiAccess.outputs.forEach(e=>{e.send([176|t,123,0])})}saveToStorage(){const t={channel:this.channel||1,program:this.program||0,isMuted:this.isMuted||!1,outputId:this.outputSelect.value,steps:this.steps.map(t=>({type:t.type,note:t.note,velocity:t.velocity,slurred:t.slurred||!1}))};console.log(this.channel,"pr",t.program),localStorage.setItem(`track-${this.id}`,JSON.stringify(t)),console.log(`saveToStorage track-${this.id}`)}loadFromStorage(){const t=JSON.parse(localStorage.getItem(`track-${this.id}`));t&&(this.program=t.program||1,this.channel=t.channel||1,this.intBox.value=this.channel,this.isMuted=t.isMuted||!1,this.muteSwitch.value=this.isMuted,this.outputSelect.value=t.outputId,this.steps.forEach((e,i)=>{const s=t.steps[i];e.type=s.type,e.note=s.note,e.velocity=s.velocity,e.slurred=s.slurred||!1,e.ref.setAttribute("type",s.type)}),console.log(this.channel,"pr",this.program),this.updateEditGrid())}}customElements.define("track-lane",TrackLane);