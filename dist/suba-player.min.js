const globalStyles=new CSSStyleSheet;globalStyles.replaceSync("\n  @font-face {\n    font-family: 'Material Icons';\n    src: url('./MaterialSymbolsRounded-Regular.ttf') format('truetype');\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  .material-icons {\n    font-family: 'Material Icons';\n    font-weight: normal;\n    font-style: normal;\n    display: inline-block;\n    line-height: 1;\n    text-transform: none;\n    letter-spacing: normal;\n    white-space: nowrap;\n    word-wrap: normal;\n    direction: ltr;\n    -webkit-font-feature-settings: 'liga';\n    -webkit-font-smoothing: antialiased;\n    user-select: none;\n  }\n\n  .bold {\n    font-weight: 700;\n  }\n");class JukeboxPlayer{constructor(){this.audio=new Audio,this.queue=[],this.index=-1,this._listeners=new Set,this.audio.addEventListener("ended",()=>this.next()),this.audio.addEventListener("play",()=>this._emit("play-state",{state:"play",track:this.getCurrentTrack()})),this.audio.addEventListener("pause",()=>this._emit("play-state",{state:"pause",track:this.getCurrentTrack()})),this.audio.addEventListener("ended",()=>this._emit("play-state",{state:"ended",track:this.getCurrentTrack()})),this.audio.addEventListener("timeupdate",t=>this._emit("timeupdate",{event:t,audio:this.audio}))}static getInstance(){return window._jukeboxPlayer||(window._jukeboxPlayer=new JukeboxPlayer),window._jukeboxPlayer}setPlaylist(t){this._emit("playlist-ended"),this.queue=t,this.queue.forEach(t=>{JukeboxPlayer.extractMetadata(t).then(e=>{t.metadata=e})}),this._emit("track-changed",this.queue.length>0?this.queue[0]:{src:"empty playlist",track:"empty playlist"})}playPlaylist(t,e=0){this.setPlaylist(t),this.play(e)}static async extractMetadata(t){if(!t.src)return t;try{const e=window.jsmediatags;return new Promise(s=>{e.read(new URL(t.src,window.location.href).href,{onSuccess:e=>{const{artist:i,album:a,title:o}=e.tags;s({...t,artist:i||"Unknown Artist",album:a||"Unknown Album",title:o||t.title})},onError:e=>{console.warn("Metadata extraction failed:",e),s(t)}})})}catch(e){return console.error("Failed to load jsmediatags library:",e),t}}play(t=this.index){t<0||t>=this.queue.length||(t!=this.index?(this.index=t,this.audio.src=this.queue[t].src,this.audio.play(),this._emit("track-changed",this.getCurrentTrack())):this.audio.play())}isPlaying(){return this.audio&&!this.audio.paused}toggle(t=this.index){t==this.index?this.isPlaying()?this.pause():this.play():this.play(t)}next(){this.index+1<this.queue.length?this.play(this.index+1):this._emit("playlist-ended")}prev(){this.index-1>=0&&this.play(this.index-1)}pause(){this.audio.pause()}getCurrentTrack(){return this.queue[this.index]||void 0}getAudioElement(){return this.audio}setCurrentTimeNormalized(t){this.setCurrentTime(this.audio.duration*t)}setCurrentTime(t){if(this.audio&&!isNaN(this.audio.duration)&&0<=this.audio.duration)if(this.audio.seekable.length>0&&this.audio.seekable.end(0)-this.audio.seekable.start(0)==0&&(console.log(`seekable range: ${this.audio.seekable.start(0)} - ${this.audio.seekable.end(0)}`),console.log("Load up your dev-tools and Verify that the Accept-Ranges: bytes header is present."),console.log("You likely need to change your webserver:"),console.log(" ❌ python -m http.server 8000         (will fail, doesn't support range)"),console.log(' ✅ npm install --save "http-server"   (14.1.1 verified to work)')),this.audio.readyState>=2)this.audio.currentTime=t,console.log(`currentTime: ${this.audio.currentTime}`);else{console.warn("Audio not ready for seeking. Waiting for readyState >= 2.");const e=()=>{console.log(`Audio is now ready for seeking. Setting currentTime to ${t}s.`),this.audio.currentTime=t,console.log(`currentTime (after ready): ${this.audio.currentTime}`),this.audio.removeEventListener("canplay",e)};this.audio.removeEventListener("canplay",e),this.audio.addEventListener("canplay",e)}}getCurrentTime(){return this.audio.currentTime}on(t,e){this._listeners.add({event:t,callback:e})}_emit(t,e){for(const{event:s,callback:i}of this._listeners)s===t&&i(e)}}customElements.define("playpause-button",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.title=this.getAttribute("title"),this.src=this.getAttribute("src"),this.shadowRoot.adoptedStyleSheets=[globalStyles],this.shadowRoot.innerHTML='\n      <style>\n        .material-icons {\n          cursor: pointer;\n          margin: 5px;\n        }\n      </style>\n      <i class="playpause-button material-icons">play_arrow</i>\n    ',this.buttonElement=this.shadowRoot.querySelector(".playpause-button"),this.buttonElement.addEventListener("click",()=>this.togglePlayback()),JukeboxPlayer.getInstance().on("play-state",t=>this.updatePlayState(t)),JukeboxPlayer.getInstance().on("play-state",t=>this.updatePlayState(t))}togglePlayback(){const t=this.getRootNode().host,e=t.closest("song-grouper");if(e){const s=t.getSongData(),i=Array.from(e.querySelectorAll("song-item")).map(t=>t.getSongData());JukeboxPlayer.getInstance().setPlaylist(i),JukeboxPlayer.getInstance().toggle(i.findIndex(t=>t.title===s.title))}else JukeboxPlayer.getInstance().getCurrentTrack()?JukeboxPlayer.getInstance().toggle():console.warn("No track is currently active to toggle playback.")}updatePlayState(t){const{state:e,track:s}=t;s.title===this.title?this.buttonElement.textContent="play"===e?"pause":"play_arrow":this.buttonElement.textContent="play_arrow"}}),customElements.define("song-item",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.adoptedStyleSheets=[globalStyles],JukeboxPlayer.getInstance().on("track-changed",t=>this.updateTrack(t))}static get observedAttributes(){return["title","src"]}attributeChangedCallback(t,e,s){""!=this.getAttribute("title")&&""!=this.getAttribute("src")&&(this.shadowRoot.innerHTML=`\n        <div><playpause-button title="${this.getAttribute("title")}" src="${this.getAttribute("src")}"></playpause-button><span class="title bold" style="cursor: pointer">${this.getAttribute("title")}</span></div>\n      `,this.shadowRoot.querySelector(".title").addEventListener("click",()=>{this.closest("song-grouper")&&this.closest("song-grouper").playSong(this)}))}getSongData(){return{title:this.getAttribute("title"),src:this.getAttribute("src"),album:this.getAttribute("album")||"",art:this.getAttribute("art")||""}}updateTrack(t){const e=this.shadowRoot.querySelector(".title");this.getAttribute("title")===t.title?e.classList.add("bold"):e.classList.remove("bold")}}),customElements.define("song-grouper",class extends HTMLElement{constructor(){super()}connectedCallback(){"true"===this.getAttribute("active")&&setTimeout(()=>{this.setPlaylist()},100)}setPlaylist(){const t=Array.from(this.querySelectorAll("song-item")).map(t=>t.getSongData());JukeboxPlayer.getInstance().setPlaylist(t)}playSong(t){let e=Array.from(this.querySelectorAll("song-item"));const s=e.map(t=>t.getSongData()),i=e.indexOf(t);JukeboxPlayer.getInstance().playPlaylist(s,i)}}),customElements.define("now-playing",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.adoptedStyleSheets=[globalStyles],this.shadowRoot.innerHTML='\n      <div class="progress-meter" style="width: 100%; height: 1rem; background-color: #333; position: relative;">\n          <div class="progress" style="width: 0%; height: 100%; background-color: #f33;"></div>\n      </div>\n      <div style="width: 100%; background-color: #f9f9f9; padding: 1rem; box-sizing: border-box; border-top: 1px solid #ccc;">\n        <div class="container" style="display: flex; align-items: center; gap: 20px;">\n          <img class="art" src="" alt="Album Art" style="width: 100px; height: 100px; object-fit: cover; border: 1px solid #ccc;">\n          <div class="info" style="flex: 1; font-size: 1em;">\n            <strong class="title">Track Title</strong>\n            <div class="time" style="margin-top: 1em; font-size: 0.9em; color: #555;">\n              <span class="current">--:--:--</span>\n            </div>\n          </div>\n          <div class="controls" style="display: flex; gap: 10px; align-items: center;">\n            <i class="prev material-icons" style="cursor: pointer;">skip_previous</i>\n            <i class="dec material-icons" style="cursor: pointer;">arrow_back</i>\n            <playpause-button title="" src="" class="playpause-button" style="display: inline-block; cursor: pointer;"></playpause-button>\n            <i class="inc material-icons" style="cursor: pointer;">arrow_forward</i>\n            <i class="next material-icons" style="cursor: pointer;">skip_next</i>\n          </div>\n        </div>\n      </div>\n    '}connectedCallback(){function t(t){if(1!==t.buttons)return;const e=t.currentTarget.getBoundingClientRect(),s=(t.clientX-e.left)/e.width;JukeboxPlayer.getInstance().setCurrentTimeNormalized(s)}JukeboxPlayer.getInstance().on("track-changed",t=>{this.updateTrack(t)}),this.current_time=this.shadowRoot.querySelector(".current"),this.progress=this.shadowRoot.querySelector(".progress"),JukeboxPlayer.getInstance().on("timeupdate",t=>this.updateTime(t.event,t.audio)),this.shadowRoot.querySelector(".progress-meter").addEventListener("mousedown",e=>t(e)),this.shadowRoot.querySelector(".progress-meter").addEventListener("mousemove",e=>t(e)),document.addEventListener("keydown",t=>this.handleGlobalKeydown(t)),this.shadowRoot.querySelector(".prev").addEventListener("click",()=>JukeboxPlayer.getInstance().prev()),this.shadowRoot.querySelector(".next").addEventListener("click",()=>JukeboxPlayer.getInstance().next()),this.shadowRoot.querySelector(".dec").addEventListener("click",()=>JukeboxPlayer.getInstance().setCurrentTime(JukeboxPlayer.getInstance().getCurrentTime()-10)),this.shadowRoot.querySelector(".inc").addEventListener("click",()=>JukeboxPlayer.getInstance().setCurrentTime(JukeboxPlayer.getInstance().getCurrentTime()+10))}handleGlobalKeydown(t){switch(t.key){case" ":t.preventDefault(),this.shadowRoot.querySelector("playpause-button").shadowRoot.querySelector(".playpause-button").click();break;case"ArrowLeft":this.shadowRoot.querySelector(".dec").click();break;case"ArrowRight":this.shadowRoot.querySelector(".inc").click();break;case"ArrowUp":this.shadowRoot.querySelector(".prev").click();break;case"ArrowDown":this.shadowRoot.querySelector(".next").click()}}updateTrack(t){t&&(this.shadowRoot.querySelector(".art").src=t.art||"",this.shadowRoot.querySelector(".title").textContent=t.title||"",this.shadowRoot.querySelector("playpause-button").title=t.title,this.shadowRoot.querySelector("playpause-button").src=t.src)}updateTime(t,e){this.current_time.textContent=this.formatTime(e.currentTime);const s=e.duration?e.currentTime/e.duration*100:0;this.progress.style.width=`${s}%`}formatTime(t){return`${Math.floor(t/3600).toString().padStart(2,"0")}:${Math.floor(t%3600/60).toString().padStart(2,"0")}:${Math.floor(t%60).toString().padStart(2,"0")}`}});